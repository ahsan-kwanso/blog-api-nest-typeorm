set up the initial folder structure
search for the folder structures for nestjs projects
I will be following the modular structure
first start with setting up the database models and connections
Will be using sequelize for this


setted the models
then connected the db in config section
then made a module for db
then imported that module in main file of app.module.ts

Models are made in db and they are following the constraints as well. Now I will start writing the business logic for the application, and other things like validators, guards middlewares


npx sequelize migration:create --name add-some-table

will just generate a migration file, in path specified in .sequelizerc


const { resolve } = require('path');

module.exports = {
  config: resolve('src/config/sequelize.config.js'),
  'seeders-path': resolve('dist/database/seeders'),
  'migrations-path': resolve('dist/database/migrations'),
  'models-path': resolve('dist/database/models'),
};


actually this is important as now you have ts files and you have to consider js files so go for that dist folder

const { resolve } = require('path');

module.exports = {
  config: resolve('src/config/sequelize.config.js'),
  'seeders-path': resolve('src/database/seeders'),
  'migrations-path': resolve('src/database/migrations'),
  'models-path': resolve('dist/database/models'),
};

chnaged these to src as create migration and seeders in src directory then changes file extension and so again back to previou sequelizerc file.

npx sequelize-cli db:migrate  
npx sequelize-cli db:seed:all


Now start working on the business logic


Suggested Order of Development:
Modular Structure: Define the module structure for the app (UserModule, PostModule, CommentModule, etc.).
Controllers & Services: Create simple controllers and services for core features (CRUD operations, DB interactions).
Authentication: Set up authentication with JWT and implement login, registration, and protected routes.
Authorization & Guards: Add guards to secure routes based on user roles and permissions.
Typeguards & Validation: Ensure all request inputs are type-checked and validated.
Middlewares & Interceptors: Introduce middleware for logging, security, or request preprocessing. Use interceptors for cross-cutting concerns like response transformation and error handling.
This approach allows you to have a working version of the application quickly while maintaining the flexibility to scale and secure it progressively.


First start with user module keep in mind the flow of the applicationa as well, like how to write code
define the data transfer objects
define the service
define the controller
define the module
import that module in main module

so this is flow

Now add global error handling mechanism as well







See how to remove any from services
add your authmiddleware in main file as in app.module.ts specified in prompt, and then test, then add customized services and then further more things
see how and where you use APP_GUARD globally


Now add your custom needed services, then I will test frontend, then I will further look for improvements, like gurads Authorization


me request done
now implement get posts get myposts search posts search my posts also add that custom middleware apply and routing request based on filter param as in your prev backend


then move to comment part

then move to authorization part

then more


If you want to modify db schema without running migrations use 
await sequelize.sync({ alter: true });
other wise run migrations and do so


Ok so which concepts are covered so far
modules
providers
controllers
middlewares
pipes
guards
exception filters
migrations
seeders
sequelize
CRUD
customizable services according to the use cases


Now will add some authorization to frontend like this will be passing props and some button addition for seeing all the users etc. For sake of practice. Then will review the code and improve it.


What I am going to do:
Admin will be able to delete any post, admin will be able to see all users or make any user admin.
I have to think of way that I have to send information in jwt payload if someone is admin, and then ignore the checks there for matching userId just directly delete the post.


Now I will be doing some work on frontend
frontend done now will add some sort of backend for that

1- send in a get request (name, email, role, number of posts)
2- use that update user request to be used by admin only to update the role.





Covert that jwt util to class based at the end








Shifting to TypeORM, basic setup done, created a dataSource file, then added scripts in package.json, make a database module, use that module in app module

created migrations
generated migrations
run migrations


Migration runs without NestJS runtime. NestJS will use app.module.ts database connection and migration will use dataSource.ts

Now check with nestjs runtime


Now all app is working
Now come to email verification (remember to generate new migration at the end)


Add new columns in db



All done what was required, so now will go through the code and study the concepts from documentation, internet, articles etc.


getRawMany will only return selected entities from table while getMany will return the whole instance of entities means all columns will be included


keep async await managed


/*
/ package.json explore
// dependency injection
// lifecycle 
// .service usage ---- done
// ctx wokring and usage
// status codes  ---- done
// pipe : messages, validations, global valiator ---- done
// restructure guards, don't use filter in guards but in service
// token verificaiton in guards
// Reflect Metadata
// don't use separate queries, create a single
// Transform before IsInt, sequence checking, also tell the max limit  --- done
// create separate folder for common       ---- done
// check for await keyword  ---- done
// file format validation using custom inteceptor ---- done
// decorator for param validation ---- done
// AWS v3 usage instead of v2   ---- done
// separate classes, cat, uat
// validation in entities, ---- done
// write the subscriber  ---- done
// usage of join column, only use when column name is different,it is must in one-to-one relationship. ---- done
// define Cascade relationship ---- already done
// do not use name of column with @Column, not recommended  ---- done
// define default port instead of using !, ---- done
// app.module validation for configuration, everything should come from same configuration. ---- done
// create provider if you want to use async, or use useclass and providers should be separate ---- done
// use query builder as minimal as possible
// don't format date in backend
// don't fetch user relation on updating the post ---- done
// make the common ENUM, create a separate table for roles ---- done
// modules should not be under separate folder  ---- done
// migration commands  ----- done
// decorators explanation, use custom decorator ---- done



complete these things and commented parts of code
*/


/*
First following my flow --- done
change entities remove unnecessary code --- done
synchronize db and check if everything is right --- done
change package json and create migrations you should give your file name  --- done
see default pacakage included and all scripts definition in package.json  --- done
see all the work of async await see github repo of someone and then proceed --- done
After this remove modules to outside  --- done
update feature should return just messages --- done
make some thing for env config like what and how --- done
then head to chat and see what was Suggested --- done
then move auth to user module ---- done
see what was asked for files and remove that Pipe as well --- done, we have to add pipes manually as well
then after working on all recommendations change the schema for db like separate table for roles now ---- done
and write the subscribers then for those validate and encrypting the password ---- done
move entities to modules then ---- done
use some package for status codes ---- done
move types to dtos in modules ---- done
see about rxjs as well  ---- done
don't use whole request get id just like thing see in commented code ---- done
that thing of instance creation as well when repository is injected ---- done
modify that edit and delete response as   ---- done
modify frontend to send only the token --- will be using the link to verify ---- done
how to enforce that .service .controller file extension ---- done, you can use es-lint to enforce such behaviours
make separate modules for email and file upload ----file module separated now separat send mail module ---- done
update your dto of pagination acc to feedback --- done
that file size handling in controller don't use that in service ---- done
see for that whitelist arg when get time --- as I have not defined dtos for some so I have set it to false currently

uuid and simple id  ---- done
adjust that guard
modify that axios interceptor as suggested in feedback session ---- done
remove that date formatting in backend ---- done
separate classes, cat, uat
Reflect Metadata, see about this i think related to guard it is
restructure guards, don't use filter in guards but in service
nest js application lifecycle 
ctx usage
*/





/*
store token in redis this is one technique as well ---------------------------
instead of isverified use verifiedat -----------------------------------------
session based authentication as well -----------------------------------------
timer stored in local storage


sign up verificaiton email --> token gen from backend and that in url, and then send the link, then user should login, get from query param. --- done
will implementation verification link technique, i think that will be better --- done
*/


now upto subscribers thing and then will see separate role table then will see the link verification then will see UI update like handle that sidebar thing.   --- done

Will add the role table and that link verification later but currently make some thing out of that UI.
Like sidebar thing, now I will be adding sidebar in layout, but instead of main page on all other pages just show home icon, instead of tabs of All Posts and My Posts, then later will see for optimization in design ---- done


Back to backend 
What is the remaining work, separate the user role table, but i think first should implement the link based verification, when this is completed then will see the UI and at the end start with that db schema update  ---- done

Ok link verification completed and UI as well, so tomorrow will see for schema updates
add expiration time, to jwt token, study about session based authentication