from flask import Flask, request, jsonify
import re
import dns.resolver
import smtplib

app = Flask(__name__)

disposable_domains = set([
    'mailinator.com', 'tempmail.com', '10minutemail.com',
    # Add more known disposable domains as needed
])

def is_valid_syntax(email):
    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(regex, email) is not None

def has_mx_record(domain):
    try:
        mx_records = dns.resolver.resolve(domain, 'MX')
        if mx_records:
            return True
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN):
        return False

def is_disposable_email(email):
    domain = email.split('@')[1]
    return domain in disposable_domains

def verify_email_smtp(email):
    try:
        domain = email.split('@')[1]
        mx_records = dns.resolver.resolve(domain, 'MX')
        mx_record = str(mx_records[0].exchange)

        server = smtplib.SMTP()
        server.set_debuglevel(0)
        server.connect(mx_record)
        server.helo(server.local_hostname)
        server.mail('2020engineerahsan@gmail.com')  # Use your real email here
        code, message = server.rcpt(email)
        server.quit()

        return code == 250
    except smtplib.SMTPServerDisconnected:
        return False
    except smtplib.SMTPRecipientsRefused:
        return False
    except Exception as e:
        return False

def validate_email(email):
    if not is_valid_syntax(email):
        return "Invalid Syntax"

    domain = email.split('@')[1]

    if not has_mx_record(domain):
        return "Invalid Domain"

    if is_disposable_email(email):
        return "Disposable Email"

    if not verify_email_smtp(email):
        return "Email Does Not Exist"

    return "Email is Valid"

@app.route('/validate-email', methods=['POST'])
def validate_email_endpoint():
    data = request.json
    email = data.get('email')
    if not email:
        return jsonify({'error': 'Email is required'}), 400

    result = validate_email(email)
    return jsonify({'email': email, 'result': result})

if __name__ == '__main__':
    app.run(port=5000)


This is the custom api I have made