# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  ParentCommentId: Int
  PostId: Int!
  UserId: Int!
  childComments: [Comment!]
  content: String!
  createdAt: DateTime!
  id: Int!
  parentComment: Comment
  post: Post!
  updatedAt: DateTime!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  message: String!
  token: String!
}

type Message {
  message: String!
}

type Mutation {
  login(loginDto: LoginDto!): LoginResponse!
  remove(id: Int!): Message!
  signout: Message!
  signup(signupDto: SignupDto!): Message!
  update(id: Int!, updateUserDto: UpdateUserDto!): User!
  verifyEmail(token: String!): Message!
}

type PaginatedUserWithNumberOfPosts {
  nextPage: String
  page: Float
  pageSize: Float
  total: Int!
  users: [UserWithNumberOfPosts!]!
}

input PaginationQueryDto {
  filter: String
  limit: Float! = 2
  page: Float! = 1
  role: String
  sortBy: String
  sortOrder: String
  title: String
  userId: Float
}

type Post {
  UserId: Int!
  comments: [Comment!]!
  content: String!
  createdAt: DateTime!
  id: Int!
  title: String!
  updatedAt: DateTime!
  user: User!
}

type Query {
  checkAuth: Message!
  currentUser: User!
  findAllPaginated(pagination: PaginationQueryDto!): PaginatedUserWithNumberOfPosts!
  findOne(id: Int!): User!
  getHello: String!
}

type Role {
  id: Int!
  name: String!
  users: [User!]!
}

input SignupDto {
  email: String!
  name: String!
  password: String!
}

input UpdateUserDto {
  RoleId: Float
  email: String
  name: String
  password: String
}

type User {
  RoleId: Int!
  comments: [Comment!]!
  createdAt: DateTime!
  email: String!
  id: Int!
  isVerified: Boolean!
  name: String!
  posts: [Post!]!
  profilePictureUrl: String
  role: Role!
  updatedAt: DateTime!
  verificationToken: String
}

type UserWithNumberOfPosts {
  email: String!
  id: Int!
  name: String!
  posts: Int!
  role: String!
}